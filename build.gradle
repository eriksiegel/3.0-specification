buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://maven.restlet.org" }
  }

  // Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01'
    }
  }

  dependencies {
    classpath fileTree(dir: 'lib/', include: ['*.jar'])
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: docbookXsltVersion
    classpath group: 'org.docbook', name: 'docbook-schemas', version: '5.1-1'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-print', version: '1.1.5'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.3.5'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.23-98'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '0.13.2'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
}

// Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
  }
}

configurations {
  tools {
    description = "Run tools"
    transitive = true
  }
}

dependencies {
  tools (
    [group: 'org.relaxng', name: 'jing', version: '20181204'],
    [group: 'org.relaxng', name: 'trang', version: '20181204']
  )
}

defaultTasks 'allspecs'

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'
apply plugin: 'groovy'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask

// ======================================================================

task allspecs(dependsOn: [ "buildspecs", "make_etc" ]) {
}

task buildspecs() {
  // dependencies are added by the specs
}

def getenv(String name) {
  if (System.getenv(name) == null) {
    return ""
  } else {
    return System.getenv(name)
  }
}

// ======================================================================
// Make sure that some build artifacts get published so that they
// can be used by the build process for the steps

task make_etc(dependsOn: [ "copy_core_schemas", "copy_xproc_build" ]) {
    // nop
}

task copy_core_schemas(dependsOn: [ "buildspecs" ], type: Copy) {
    from "build/core30.rng", "build/xproc.rng", "build/xproc.rnc",
         "build/xproc10.rng", "build/xproc10.rnc", "build/xproc30.rng",
         "build/xproc30.rnc"
    into "build/etc/"
    doFirst { mkdir "$buildDir/etc" }
}

task copy_xproc_build(dependsOn: [ "buildspecs" ], type: Copy) {
    from "xproc/build/"
    exclude "xinclude.xml", "examples/**", "graphics/**", "glossary.xml"
    into "build/etc/xproc/"
    doFirst { mkdir "$buildDir/etc/xproc" }
}

// ======================================================================
// overview

task overview(dependsOn: [ "xproc_schemas", "spec_schemas",
                           "overview:specification", "overview_assets",
                           "overview_src" ],
              type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "overview/build/source.xml")
  output("result", "build/dist/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "overview"

task overview_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/"
}

task overview_src(dependsOn: ["overview:source"], type: Copy) {
  from "overview/build/"
  into "build/dist/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

// ================================================================================

task xproc(dependsOn: [ "xproc_schemas", "spec_schemas",
                        "xproc:specification", "xproc_assets", "xproc_src",
                        "xproc_ancillary", "xproc_library"],
             type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "xproc/build/source.xml")
  output("result", "build/dist/xproc/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  option("diffkey", getenv("DELTAXML_DIFF_KEY"))
  option("webid", "xproc")
  option("diffloc", new File("build/dist/xproc/diff.html").getAbsolutePath())

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "xproc"
overview.dependsOn "xproc"

task xproc_pdf_xform(dependsOn: [ "xproc" ], type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "xproc/build/source.xml")
  output("result", "build/dist/xproc/pdfhtml.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-pdf.xsl"))
  option("postprocess", new File("tools/xsl/post-pdf.xsl"))
  option("diffkey", getenv("DELTAXML_DIFF_KEY"))
  option("webid", "xproc")
  option("diffloc", new File("build/dist/xproc/diff.html").getAbsolutePath())

  pipeline "tools/xpl/pdfspec.xpl"
}

task xproc_pdf(dependsOn: [ "xproc_pdf_xform" ], type: XMLCalabashTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.files fileTree(dir: "src/main/css")

  input("source", "build/dist/xproc/pdfhtml.html")
  outputs.file "build/dist/xproc/xproc.pdf"

  option("css", "src/main/css/print.css")
  option("pdf", new File("build/dist/xproc/xproc.pdf").getAbsolutePath())

  pipeline "tools/xpl/css-format.xpl"
}

task xproc_ancillary(dependsOn: [ "xproc10_rng", "xproc30_rnc", "xproc_rng" ], type: Copy) {
  from "build/"
  into "build/dist/xproc/"
  include "xproc*.rnc"
  include "xproc*.rng"
}
xproc_ancillary.doFirst {
  mkdir("build/dist/xproc")
}

task xproc_library(type: XMLCalabashTask,
                   dependsOn: [ "steps_xpl", "step_validation_xpl",
                                "step_os_xpl", "step_run_xpl",
                                "step_file_xpl", "step_text_xpl",
                                "step_paged_media_xpl"]) {
  // N.B. Because Travis jobs cannot see the filesystem, we have
  // to list the dependencies twice. :-(
  String steps = ""
  ["steps", "validation", "os", "run", "file", "text", "paged-media"].each { s->
    steps = steps + " ../../build/dist/" + s + "/steps.xpl"
  }

  inputs.files(fileTree(dir: 'build').include("**/steps.xpl"))
  inputs.file "tools/xpl/make-library.xpl"
  inputs.file "tools/xsl/make-library.xsl"
  input("source", "build/dist/steps/steps.xpl")
  output("result", "build/dist/xproc/library.xpl")
  param("libraries", steps)
  pipeline "tools/xpl/make-library.xpl"
}
xproc_library.doFirst {
  mkdir("build/dist/xproc")
}

task xproc_assets(dependsOn: [ "xproc:images", "xproc_web_assets" ], type: Copy) {
  from "xproc/build/graphics"
  into "build/dist/xproc/graphics/"
}

task xproc_web_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/xproc/"
}

task xproc_src(dependsOn: ["xproc:source"], type: Copy) {
  from "xproc/build/"
  into "build/dist/xproc/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

// ======================================================================
// steps

task steps(dependsOn: [ "xproc", "xproc_schemas", "spec_schemas",
                        "steps:specification", "steps_assets", "steps_src",
                        "steps_xpl" ],
           type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "steps/build/source.xml")
  output("result", "build/dist/steps/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  option("diffkey", getenv("DELTAXML_DIFF_KEY"))
  option("webid", "steps")
  option("diffloc", new File("build/dist/steps/diff.html").getAbsolutePath())

  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "steps"
overview.dependsOn "steps"

task steps_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/steps/"
}

task steps_src(dependsOn: ["steps:source"], type: Copy) {
  from "steps/build/"
  into "build/dist/steps/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task steps_xpl(dependsOn: ["steps:library"], type: Copy) {
  from "steps/build/"
  into "build/dist/steps/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-validation

task step_validation(type: DocBookTask,
                     dependsOn: [ "xproc", "steps", "xproc_schemas", "spec_schemas",
                                  "step-validation:specification",
                                  "step_validation_assets", "step_validation_src",
                                  "step_validation_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "xproc/build/toc.xml"
  input("source", "step-validation/build/source.xml")
  output("result", "build/dist/validation/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_validation"
overview.dependsOn "step_validation"

task step_validation_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/validation/"
}

task step_validation_src(dependsOn: ["step-validation:source"], type: Copy) {
  from "step-validation/build/"
  into "build/dist/validation/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_validation_xpl(dependsOn: ["step-validation:library"], type: Copy) {
  from "step-validation/build/"
  into "build/dist/validation/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-os

task step_os(type: DocBookTask,
               dependsOn: [ "xproc", "steps", "xproc_schemas", "spec_schemas",
                            "step-os:specification",
                            "step_os_assets",
                            "step_os_src", "step_os_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "xproc/build/toc.xml"
  input("source", "step-os/build/source.xml")
  output("result", "build/dist/os/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_os"
overview.dependsOn "step_os"

task step_os_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/os/"
}

task step_os_src(dependsOn: ["step-os:source"], type: Copy) {
  from "step-os/build/"
  into "build/dist/os/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_os_xpl(dependsOn: ["step-os:library"], type: Copy) {
  from "step-os/build/"
  into "build/dist/os/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-run

task step_run(type: DocBookTask,
               dependsOn: [ "xproc", "steps", "xproc_schemas", "spec_schemas",
                            "step-run:specification",
                            "step_run_assets",
                            "step_run_src", "step_run_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "xproc/build/toc.xml"
  input("source", "step-run/build/source.xml")
  output("result", "build/dist/run/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_run"
overview.dependsOn "step_run"

task step_run_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/run/"
}

task step_run_src(dependsOn: ["step-run:source"], type: Copy) {
  from "step-run/build/"
  into "build/dist/run/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_run_xpl(dependsOn: ["step-run:library"], type: Copy) {
  from "step-run/build/"
  into "build/dist/run/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-paged-media

task step_paged_media(type: DocBookTask,
               dependsOn: [ "xproc", "steps", "xproc_schemas", "spec_schemas",
                            "step-paged-media:specification",
                            "step_paged_media_assets",
                            "step_paged_media_src", "step_paged_media_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "xproc/build/toc.xml"
  input("source", "step-paged-media/build/source.xml")
  output("result", "build/dist/paged-media/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_paged_media"
overview.dependsOn "step_paged_media"

task step_paged_media_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/paged-media/"
}

task step_paged_media_src(dependsOn: ["step-paged-media:source"], type: Copy) {
  from "step-paged-media/build/"
  into "build/dist/paged-media/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_paged_media_xpl(dependsOn: ["step-paged-media:library"], type: Copy) {
  from "step-paged-media/build/"
  into "build/dist/paged-media/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-file

task step_file(type: DocBookTask,
               dependsOn: [ "xproc", "steps", "xproc_schemas", "spec_schemas",
                            "step-file:specification",
                            "step_file_assets",
                            "step_file_src", "step_file_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "xproc/build/toc.xml"
  input("source", "step-file/build/source.xml")
  output("result", "build/dist/file/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_file"
overview.dependsOn "step_file"

task step_file_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/file/"
}

task step_file_src(dependsOn: ["step-file:source"], type: Copy) {
  from "step-file/build/"
  into "build/dist/file/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_file_xpl(dependsOn: ["step-file:library"], type: Copy) {
  from "step-file/build/"
  into "build/dist/file/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-text

task step_text(type: DocBookTask,
               dependsOn: [ "xproc", "steps", "xproc_schemas", "spec_schemas",
                            "step-text:specification",
                            "step_text_assets",
                            "step_text_src", "step_text_xpl" ]) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  inputs.file "xproc/build/toc.xml"
  input("source", "step-text/build/source.xml")
  output("result", "build/dist/text/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  param("travis", getenv("TRAVIS"))
  param("travis-commit", getenv("TRAVIS_COMMIT"))
  param("travis-build-number", getenv("TRAVIS_BUILD_NUMBER"))
  param("travis-user", getenv("TRAVIS_USER"))
  param("travis-repo", getenv("TRAVIS_REPO"))
  param("travis-branch", getenv("TRAVIS_BRANCH"))
  param("travis-tag", getenv("TRAVIS_TAG"))

  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
buildspecs.dependsOn "step_text"
overview.dependsOn "step_text"

task step_text_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/text/"
}

task step_text_src(dependsOn: ["step-text:source"], type: Copy) {
  from "step-text/build/"
  into "build/dist/text/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task step_text_xpl(dependsOn: ["step-text:library"], type: Copy) {
  from "step-text/build/"
  into "build/dist/text/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// Specification schemas

task spec_schemas(dependsOn: [ "spec_rng", "spec_sch" ]) {
  // nop
}

task spec_rng(type: JavaExec) {
  inputs.files fileTree(dir: "schema/")
  outputs.file "build/schema/dbspec.rng"

  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["schema/dbspec.rnc", "build/schema/dbspec.rng"]
}
spec_rng.doFirst {
  mkdir("build/schema")
}

task spec_sch(type: Copy) {
  from('schema') {
    include "docbook.sch"
  }
  into "build/schema"
}
spec_sch.doFirst {
  mkdir("build/schema")
}

// ======================================================================
// XProc schemas

task core_rng(type: JavaExec) {
  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["src/main/schema/core30.rnc", "build/core30.rng"]
}
core_rng.doFirst {
  mkdir("build")
}

task xproc30_rng(type: XMLCalabashTask,
               dependsOn: [ "core_rng",
                            "steps:rng", "step-validation:rng",
                            "step-os:rng", "step-run:rng",
                            "step-text:rng", "step-file:rng",
                            "step-paged-media:rng" ]) {
  // This is bogus; I'm having trouble getting the filesystem read to
  // happen at the right time:
  // https://discuss.gradle.org/t/controlling-order-of-execution-of-statements-wrt-execution-of-a-task/26291
  String files = ""
  ["step-os", "step-run", "step-paged-media", "steps",
   "step-file", "step-text",
   "step-validation"].each { s ->
    files = files + " ../../" + s + "/build/steps.rng"
  }

  inputs.file "build/core30.rng"
  inputs.file "tools/xpl/make-rng.xpl"
  inputs.file "tools/xsl/make-rng.xsl"
  outputs.file "build/xproc30.rng"
  input("source", "build/core30.rng")
  output("result", "build/xproc30.rng")
  param("libraries", files)
  pipeline "tools/xpl/make-rng.xpl"
}

task xproc30_rnc(dependsOn: [ "xproc30_rng" ], type: JavaExec) {
  inputs.file "build/xproc30.rng"
  outputs.file "build/xproc30.rnc"
  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["build/xproc30.rng", "build/xproc30.rnc"]
}
xproc30_rnc.doFirst {
  mkdir("build")
}

task xproc10_rnc(type: Copy) {
  from "src/main/schema/"
  into "build/"
  include "xproc10.rnc"
}
xproc10_rnc.doFirst {
  mkdir("build")
}

task xproc_rnc(type: Copy) {
  from "src/main/schema/"
  into "build/"
  include "xproc.rnc"
}
xproc_rnc.doFirst {
  mkdir("build")
}

task xproc10_rng(dependsOn: [ "xproc10_rnc" ], type: JavaExec) {
  inputs.file "build/xproc10.rnc"
  outputs.file "build/xproc10.rng"

  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["build/xproc10.rnc", "build/xproc10.rng"]
}

task xproc_rng(dependsOn: [ "xproc_rnc" ], type: JavaExec) {
  inputs.file "build/xproc.rnc"
  outputs.file "build/xproc.rng"

  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["build/xproc.rnc", "build/xproc.rng"]
}

task xproc_schemas(dependsOn: [ "xproc30_rnc", "xproc30_rng", "xproc10_rng", "xproc_rng" ],
                   type: JavaExec) {
  inputs.file "tools/xpl/smoke-test.xpl"

  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.util.Driver'
  args = ["-i", "-c", "build/xproc.rnc", "tools/xpl/smoke-test.xpl" ]
}

// ======================================================================
// Clean up

clean {
  doFirst {
    delete("build")
  }
}

