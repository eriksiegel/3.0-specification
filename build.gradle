buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://maven.restlet.org" }
  }

  dependencies {
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: '2.2.2'
    classpath group: 'org.docbook', name: 'docbook-schemas', version: '5.1-1'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.3.4'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.19-98'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '0.13.1'
  }
}

repositories {
    maven { url uri('/tmp/repo') }
  mavenLocal()
  mavenCentral()
}

configurations {
  tools {
    description = "Run tools"
    transitive = true
  }
}

dependencies {
  tools (
    fileTree(dir: 'tools/lib').include("*.jar")
  )
}

defaultTasks 'allspecs'

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'
apply plugin: 'groovy'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask

// ================================================================================

task allspecs() {
  // dependencies are added by the specs
}

task xproc(dependsOn: [ "xproc_schemas", "spec_schemas",
                        "xproc:specification", "xproc_assets", "xproc_src" ],
             type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "xproc/build/source.xml")
  output("result", "build/dist/xproc/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "xproc"

task xproc_assets(dependsOn: [ "xproc_web_assets" ], type: Copy) {
  from "xproc/build/graphics"
  into "build/dist/xproc/graphics/"
}

task xproc_web_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/xproc/"
}

task xproc_src(dependsOn: ["xproc:source"], type: Copy) {
  from "xproc/build/"
  into "build/dist/xproc/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

// ======================================================================
// overview

task overview(dependsOn: [ "xproc_schemas", "spec_schemas",
                           "overview:specification", "overview_assets",
                           "overview_src" ],
              type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "overview/build/source.xml")
  output("result", "build/dist/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "overview"

task overview_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/"
}

task overview_src(dependsOn: ["overview:source"], type: Copy) {
  from "overview/build/"
  into "build/dist/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

// ======================================================================
// steps-intro

task steps_intro(dependsOn: [ "xproc_schemas", "spec_schemas",
                                "steps-intro:specification", "steps_intro_assets",
                                "steps_intro_src" ],
                 type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "steps-intro/build/source.xml")
  output("result", "build/dist/steps-intro/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "steps_intro"

task steps_intro_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/steps-intro/"
}

task steps_intro_src(dependsOn: ["steps-intro:source"], type: Copy) {
  from "steps-intro/build/"
  into "build/dist/steps-intro/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

// ======================================================================
// steps

task steps(dependsOn: [ "xproc_schemas", "spec_schemas",
                        "steps:specification", "steps_assets", "steps_src",
                        "steps_xpl" ],
           type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "steps/build/source.xml")
  output("result", "build/dist/steps/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "steps"

task steps_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/steps/"
}

task steps_src(dependsOn: ["steps:source"], type: Copy) {
  from "steps/build/"
  into "build/dist/steps/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task steps_xpl(dependsOn: ["steps:library"], type: Copy) {
  from "steps/build/"
  into "build/dist/steps/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-validate-relax-ng

task validate_relax_ng(dependsOn: [ "xproc_schemas", "spec_schemas",
                                    "step-validate-relax-ng:specification",
                                    "validate_relax_ng_assets",
                                    "validate_relax_ng_src", "validate_relax_ng_xpl" ],
                       type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "step-validate-relax-ng/build/source.xml")
  output("result", "build/dist/validate-with-relax-ng/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "validate_relax_ng"

task validate_relax_ng_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/validate-with-relax-ng/"
}

task validate_relax_ng_src(dependsOn: ["step-validate-relax-ng:source"], type: Copy) {
  from "step-validate-relax-ng/build/"
  into "build/dist/validate-with-relax-ng/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task validate_relax_ng_xpl(dependsOn: ["step-validate-relax-ng:library"], type: Copy) {
  from "step-validate-relax-ng/build/"
  into "build/dist/validate-with-relax-ng/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-validate-xml-schema

task validate_xml_schema(dependsOn: [ "xproc_schemas", "spec_schemas",
                                      "step-validate-xml-schema:specification",
                                      "validate_xml_schema_assets",
                                      "validate_xml_schema_src", "validate_xml_schema_xpl"],
                         type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "step-validate-xml-schema/build/source.xml")
  output("result", "build/dist/validate-with-xml-schema/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "validate_xml_schema"

task validate_xml_schema_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/validate-with-xml-schema/"
}

task validate_xml_schema_src(dependsOn: ["step-validate-xml-schema:source"], type: Copy) {
  from "step-validate-xml-schema/build/"
  into "build/dist/validate-with-xml-schema/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task validate_xml_schema_xpl(dependsOn: ["step-validate-xml-schema:library"], type: Copy) {
  from "step-validate-xml-schema/build/"
  into "build/dist/validate-with-xml-schema/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// step-validate-schematron

task validate_schematron(dependsOn: [ "xproc_schemas", "spec_schemas",
                                      "step-validate-schematron:specification",
                                      "validate_schematron_assets",
                                      "validate_schematron_src","validate_schematron_xpl" ],
                         type: DocBookTask) {
  inputs.files fileTree(dir: "tools/xsl/")
  inputs.files fileTree(dir: "tools/xpl/")
  input("source", "step-validate-schematron/build/source.xml")
  output("result", "build/dist/validate-with-schematron/index.html")

  param("schemaext.schema", new File("build/schema/dbspec.rng"))
  option("style", new File("tools/xsl/xproc-specs.xsl"))
  pipeline "tools/xpl/formatspec.xpl"
}
allspecs.dependsOn "validate_schematron"

task validate_schematron_assets(type: Copy) {
  from "src/main/resources"
  into "build/dist/validate-with-schematron/"
}

task validate_schematron_src(dependsOn: ["step-validate-schematron:source"], type: Copy) {
  from "step-validate-schematron/build/"
  into "build/dist/validate-with-schematron/"
  include "source.xml"
  rename ("source.xml", "specification.xml")
}

task validate_schematron_xpl(dependsOn: ["step-validate-schematron:library"], type: Copy) {
  from "step-validate-schematron/build/"
  into "build/dist/validate-with-schematron/"
  include "library.xml"
  rename ("library.xml", "steps.xpl")
}

// ======================================================================
// Specification schemas

task spec_schemas(dependsOn: [ "spec_rng", "spec_sch" ]) {
  // nop
}

task spec_rng(type: JavaExec) {
  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["schema/dbspec.rnc", "build/schema/dbspec.rng"]
}
spec_rng.doFirst {
  mkdir("build/schema")
}

task spec_sch(type: Copy) {
  from('schema') {
    include "docbook.sch"
  }
  into "build/schema"
}

// ======================================================================
// XProc schemas

task core_rng(type: JavaExec) {
  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["src/main/schema/xproc.rnc", "build/core.rng"]
}
core_rng.doFirst {
  mkdir("build")
}

task xproc_rng(dependsOn: [ "core_rng",
                            "steps:rng", "step-validate-relax-ng:rng",
                            "step-validate-xml-schema:rng",
                            "step-validate-schematron:rng" ],
               type: XMLCalabashTask) {
  inputs.file "build/core.rng"
  inputs.file "steps/build/library.xml"
  inputs.file "step-validate-relax-ng/build/library.xml"
  inputs.file "step-validate-xml-schema/build/library.xml"
  inputs.file "step-validate-schematron/build/library.xml"
  inputs.file "tools/xpl/make-rng.xpl"
  inputs.file "tools/xsl/make-rng.xsl"
  outputs.file "build/xproc.rng"
  input("source", "build/core.rng")
  output("result", "build/xproc.rng")
  pipeline "tools/xpl/make-rng.xpl"
}

task xproc_rnc(dependsOn: [ "xproc_rng" ], type: JavaExec) {
  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["build/xproc.rng", "build/xproc.rnc"]
}
xproc_rnc.doFirst {
  mkdir("build")
}

task xproc_schemas(dependsOn: [ "xproc_rnc", "xproc_rng" ]) {
  // nop
}

// ======================================================================
// Clean up

clean {
  doFirst {
    delete("build")
  }
}

