buildscript {
  repositories {
    mavenCentral()
    maven { url "http://maven.restlet.org" }
  }

  dependencies {
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: '2.0.19'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-print', version: '1.1.4'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.1.2'
  }
}

plugins {
  id "de.undercouch.download" version "2.0.0"
}

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  compile {
    description = "Compile the project"
    transitive = true
  }

  runtime {
    extendsFrom compile
  }
}

dependencies {
  runtime (
    fileTree(dir: 'tools/lib').include("*.jar")
  )
}

defaultTasks 'specification'

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask
import de.undercouch.gradle.tasks.download.Download

project.ext.docbookXslt = "docbook-xslt2-$docbookXsltVersion"

// ================================================================================
// Setup DocBook

task downloadDocBook(type: Download) {
  src docbookXsltBaseUri + '/release/' + docbookXsltVersion + '/' + docbookXslt + '.zip'
  dest new File(buildDir, docbookXslt + '.zip')
}
downloadDocBook.onlyIf { !file("build/${docbookXslt}.zip").exists() }

task setupDocBook(dependsOn: downloadDocBook, type: Copy) {
  from zipTree(downloadDocBook.dest)
  into { "build" }
  doLast {
    copy {
      from "build/$docbookXslt"
      into 'build/docbook'
    }
  }
}
setupDocBook.onlyIf { !file("build/docbook").exists() }

// ================================================================================
// Compile the schemas

task compileSpecSchema(dependsOn: ["copySpecSchematron"], type: JavaExec) {
  classpath = configurations.runtime
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["schema/dbspec.rnc", "build/schema/dbspec.rng"]
}

task copySpecSchematron(type: Copy) {
  from('schema') {
    include "docbook.sch"
  }
  into "build/schema"
}
copySpecSchematron.doFirst {
  mkdir "build/schema"
}

task compileXProcSchema(dependsOn: ["copyXProcSchema", "steps_rnc"], type: JavaExec) {
  classpath = configurations.runtime
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["build/xproc.rnc", "build/xproc.rng"]
}

task copyXProcSchema(type: Copy) {
  from('src/main/schema') {
    include "xproc.rnc"
  }
  into "build"
}

task xproc_schemas(dependsOn: [ "compileXProcSchema", "steps_rnc" ], type: Copy) {
  from('build') {
    include "xproc.rnc"
    include "xproc.rng"
    include "steps.rnc"
    include "steps.rng"
  }
  into "build/xproc30"
}
xproc_schemas.doFirst {
  mkdir "build/xproc30"
}

task step_schemas(dependsOn: [ "compileXProcSchema", "steps_rnc" ], type: Copy) {
  from('build') {
    include "xproc.rnc"
    include "xproc.rng"
    include "steps.rnc"
    include "steps.rng"
  }
  into "build/steps30"
}
step_schemas.doFirst {
  mkdir "build/steps30"
}


// ================================================================================
// XInclude the sources

task xproc30_xi1(dependsOn: ["compileSpecSchema", "xproc30_examples"],
                 type: XMLCalabashTask) {
  inputs.file "src/main/xml/xproc/xproc.xml"
  inputs.file "src/main/xml/xproc/conformance.xml"
  inputs.file "src/main/xml/xproc/error-codes.xml"
  inputs.file "src/main/xml/xproc/language-summary.xml"
  inputs.file "src/main/xml/xproc/mediatype.xml"
  inputs.file "src/main/xml/xproc/namespace-fixup.xml"
  inputs.file "src/main/xml/xproc/parallel.xml"
  inputs.file "src/main/xml/xproc/references.xml"
  outputs.file "build/,xproc30.xml"
  input("source", "src/main/xml/xproc/xproc.xml")
  output("result", "build/,xproc30.xml")
  option("schema", "build/schema/dbspec.rng")
  option("schematron", "build/schema/docbook.sch")
  pipeline "tools/xpl/validate.xpl"
}

task xproc30_examples(type: Exec) {
  commandLine "make", "-C", "src/main/xml/xproc/examples"
}

task xproc30_src(dependsOn: ["xproc_glossary"], type: XMLCalabashTask) {
  inputs.file "src/main/xml/xproc/xproc.xml"
  inputs.file "src/main/xml/xproc/conformance.xml"
  inputs.file "src/main/xml/xproc/error-codes.xml"
  inputs.file "build/xproc-glossary.xml"
  inputs.file "src/main/xml/xproc/language-summary.xml"
  inputs.file "src/main/xml/xproc/mediatype.xml"
  inputs.file "src/main/xml/xproc/namespace-fixup.xml"
  inputs.file "src/main/xml/xproc/parallel.xml"
  inputs.file "src/main/xml/xproc/references.xml"
  outputs.file "build/xproc30/xproc30.xml"
  input("source", "src/main/xml/xproc/xproc.xml")
  output("result", "build/xproc30/xproc30.xml")
  param("schema", "build/schema/dbspec.rng")
  param("schematron", "build/schema/docbook.sch")
  pipeline "tools/xpl/validate.xpl"
}
xproc30_src.doFirst {
  mkdir "build/xproc30"
}

task xproc_glossary(dependsOn: ["xproc30_xi1"], type: XMLCalabashTask) {
  inputs.file "build/,xproc30.xml"
  inputs.file "tools/xpl/makeglossary.xpl"
  inputs.file "tools/xsl/makeglossary.xsl"
  outputs.file "build/xproc-glossary.xml"
  input("source", "build/,xproc30.xml")
  output("result", "build/xproc-glossary.xml")
  pipeline "tools/xpl/makeglossary.xpl"
}

task steps30_xi1(dependsOn: ["compileSpecSchema", "steps30_examples"], type: XMLCalabashTask) {
  inputs.file "src/main/xml/steps/steps.xml"
  inputs.file "src/main/xml/steps/errors.xml"
  inputs.file "src/main/xml/steps/error-codes.xml"
  inputs.file "src/main/xml/steps/steps/add-attribute.xml"
  inputs.file "src/main/xml/steps/steps/add-xml-base.xml"
  inputs.file "src/main/xml/steps/steps/cast-content-type.xml"
  inputs.file "src/main/xml/steps/steps/compare.xml"
  inputs.file "src/main/xml/steps/steps/count.xml"
  inputs.file "src/main/xml/steps/steps/delete.xml"
  inputs.file "src/main/xml/steps/steps/directory-list.xml"
  inputs.file "src/main/xml/steps/steps/error.xml"
  inputs.file "src/main/xml/steps/steps/escape-markup.xml"
  inputs.file "src/main/xml/steps/steps/exec.xml"
  inputs.file "src/main/xml/steps/steps/filter.xml"
  inputs.file "src/main/xml/steps/steps/hash.xml"
  inputs.file "src/main/xml/steps/steps/http-request.xml"
  inputs.file "src/main/xml/steps/steps/identity.xml"
  inputs.file "src/main/xml/steps/steps/in-scope-names.xml"
  inputs.file "src/main/xml/steps/steps/insert.xml"
  inputs.file "src/main/xml/steps/steps/label-elements.xml"
  inputs.file "src/main/xml/steps/steps/load.xml"
  inputs.file "src/main/xml/steps/steps/make-absolute-uris.xml"
  inputs.file "src/main/xml/steps/steps/namespace-rename.xml"
  inputs.file "src/main/xml/steps/steps/pack.xml"
  inputs.file "src/main/xml/steps/steps/parameters.xml"
  inputs.file "src/main/xml/steps/steps/rename.xml"
  inputs.file "src/main/xml/steps/steps/replace.xml"
  inputs.file "src/main/xml/steps/steps/schemas.xml"
  inputs.file "src/main/xml/steps/steps/set-attributes.xml"
  inputs.file "src/main/xml/steps/steps/set-properties.xml"
  inputs.file "src/main/xml/steps/steps/sink.xml"
  inputs.file "src/main/xml/steps/steps/split-sequence.xml"
  inputs.file "src/main/xml/steps/steps/store.xml"
  inputs.file "src/main/xml/steps/steps/string-replace.xml"
  inputs.file "src/main/xml/steps/steps/template.xml"
  inputs.file "src/main/xml/steps/steps/unescape-markup.xml"
  inputs.file "src/main/xml/steps/steps/unwrap.xml"
  inputs.file "src/main/xml/steps/steps/uuid.xml"
  inputs.file "src/main/xml/steps/steps/validate-with-relax-ng.xml"
  inputs.file "src/main/xml/steps/steps/validate-with-schematron.xml"
  inputs.file "src/main/xml/steps/steps/validate-with-xml-schema.xml"
  inputs.file "src/main/xml/steps/steps/wrap-sequence.xml"
  inputs.file "src/main/xml/steps/steps/wrap.xml"
  inputs.file "src/main/xml/steps/steps/www-form-urldecode.xml"
  inputs.file "src/main/xml/steps/steps/www-form-urlencode.xml"
  inputs.file "src/main/xml/steps/steps/xinclude.xml"
  inputs.file "src/main/xml/steps/steps/xquery.xml"
  inputs.file "src/main/xml/steps/steps/xsl-formatter.xml"
  inputs.file "src/main/xml/steps/steps/xslt.xml"
  inputs.file "src/main/xml/steps/steps/payloads/request_body.xml"
  inputs.file "src/main/xml/steps/steps/payloads/request_response.xml"
  inputs.file "src/main/xml/steps/steps/payloads/response_body.xml"
  outputs.file "build/,steps30.xml"
  input("source", "src/main/xml/steps/steps.xml")
  output("result", "build/,steps30.xml")
  option("schema", "build/schema/dbspec.rng")
  option("schematron", "build/schema/docbook.sch")
  pipeline "tools/xpl/validate.xpl"
}

task steps30_examples(type: Exec) {
  commandLine "make", "-C", "src/main/xml/steps/examples"
}

task steps30_src(dependsOn: ["steps_glossary"], type: XMLCalabashTask) {
  inputs.file "src/main/xml/steps/steps.xml"
  inputs.file "src/main/xml/steps/errors.xml"
  inputs.file "src/main/xml/steps/error-codes.xml"
  inputs.file "src/main/xml/steps/steps/add-attribute.xml"
  inputs.file "src/main/xml/steps/steps/add-xml-base.xml"
  inputs.file "src/main/xml/steps/steps/cast-content-type.xml"
  inputs.file "src/main/xml/steps/steps/compare.xml"
  inputs.file "src/main/xml/steps/steps/count.xml"
  inputs.file "src/main/xml/steps/steps/delete.xml"
  inputs.file "src/main/xml/steps/steps/directory-list.xml"
  inputs.file "src/main/xml/steps/steps/error.xml"
  inputs.file "src/main/xml/steps/steps/escape-markup.xml"
  inputs.file "src/main/xml/steps/steps/exec.xml"
  inputs.file "src/main/xml/steps/steps/filter.xml"
  inputs.file "src/main/xml/steps/steps/hash.xml"
  inputs.file "src/main/xml/steps/steps/http-request.xml"
  inputs.file "src/main/xml/steps/steps/identity.xml"
  inputs.file "src/main/xml/steps/steps/in-scope-names.xml"
  inputs.file "src/main/xml/steps/steps/insert.xml"
  inputs.file "src/main/xml/steps/steps/label-elements.xml"
  inputs.file "src/main/xml/steps/steps/load.xml"
  inputs.file "src/main/xml/steps/steps/make-absolute-uris.xml"
  inputs.file "src/main/xml/steps/steps/namespace-rename.xml"
  inputs.file "src/main/xml/steps/steps/pack.xml"
  inputs.file "src/main/xml/steps/steps/parameters.xml"
  inputs.file "src/main/xml/steps/steps/rename.xml"
  inputs.file "src/main/xml/steps/steps/replace.xml"
  inputs.file "src/main/xml/steps/steps/schemas.xml"
  inputs.file "src/main/xml/steps/steps/set-attributes.xml"
  inputs.file "src/main/xml/steps/steps/set-properties.xml"
  inputs.file "src/main/xml/steps/steps/sink.xml"
  inputs.file "src/main/xml/steps/steps/split-sequence.xml"
  inputs.file "src/main/xml/steps/steps/store.xml"
  inputs.file "src/main/xml/steps/steps/string-replace.xml"
  inputs.file "src/main/xml/steps/steps/template.xml"
  inputs.file "src/main/xml/steps/steps/unescape-markup.xml"
  inputs.file "src/main/xml/steps/steps/unwrap.xml"
  inputs.file "src/main/xml/steps/steps/uuid.xml"
  inputs.file "src/main/xml/steps/steps/validate-with-relax-ng.xml"
  inputs.file "src/main/xml/steps/steps/validate-with-schematron.xml"
  inputs.file "src/main/xml/steps/steps/validate-with-xml-schema.xml"
  inputs.file "src/main/xml/steps/steps/wrap-sequence.xml"
  inputs.file "src/main/xml/steps/steps/wrap.xml"
  inputs.file "src/main/xml/steps/steps/www-form-urldecode.xml"
  inputs.file "src/main/xml/steps/steps/www-form-urlencode.xml"
  inputs.file "src/main/xml/steps/steps/xinclude.xml"
  inputs.file "src/main/xml/steps/steps/xquery.xml"
  inputs.file "src/main/xml/steps/steps/xsl-formatter.xml"
  inputs.file "src/main/xml/steps/steps/xslt.xml"
  outputs.file "build/steps30/steps30.xml"
  input("source", "src/main/xml/steps/steps.xml")
  output("result", "build/steps30/steps30.xml")
  option("schema", "build/schema/dbspec.rng")
  option("schematron", "build/schema/docbook.sch")
  pipeline "tools/xpl/validate.xpl"
}
steps30_src.doFirst {
  mkdir "build/steps30"
}

task steps_glossary(dependsOn: ["steps30_xi1"], type: XMLCalabashTask) {
  inputs.file "build/,steps30.xml"
  inputs.file "tools/xpl/makeglossary.xpl"
  inputs.file "tools/xsl/makeglossary.xsl"
  outputs.file "build/xproc-glossary.xml"
  input("source", "build/,steps30.xml")
  output("result", "build/steps-glossary.xml")
  pipeline "tools/xpl/makeglossary.xpl"
}

// ================================================================================
// Make the pipeline libraries

task pipeline_library(dependsOn: ["steps30_src"], type: XMLCalabashTask) {
  inputs.file "build/steps30/steps30.xml"
  inputs.file "tools/xpl/pipeline-library.xpl"
  inputs.file "tools/xsl/pipeline-library.xsl"
  outputs.file "build/pipeline-library.xml"
  input("source", "build/steps30/steps30.xml")
  output("result", "build/pipeline-library.xml")
  pipeline "tools/xpl/pipeline-library.xpl"
}

task typed_pipeline_library(dependsOn: ["steps30_src"], type: XMLCalabashTask) {
  inputs.file "build/steps30/steps30.xml"
  inputs.file "tools/xpl/typed-pipeline-library.xpl"
  inputs.file "tools/xsl/typed-pipeline-library.xsl"
  outputs.file "build/typed-pipeline-library.xml"
  input("source", "build/steps30/steps30.xml")
  output("result", "build/typed-pipeline-library.xml")
  pipeline "tools/xpl/typed-pipeline-library.xpl"
}

// ================================================================================
// Make steps.rnc

task steps_rnc(dependsOn: ["typed_pipeline_library"], type: XMLCalabashTask) {
  inputs.file "build/typed-pipeline-library.xml"
  inputs.file "tools/xpl/library-to-rnc.xpl"
  inputs.file "tools/xsl/library-to-rnc.xsl"
  // For some reason, if I declare the output file, it thinks it's up-to-date
  // outputs.file "build/steps.rnc"
  input("source", "build/typed-pipeline-library.xml")
  output("result", "build/steps.rnc")
  pipeline "tools/xpl/library-to-rnc.xpl"
}

// ================================================================================
// Format the specs

task xproc30(dependsOn: ["setupDocBook", "xproc30_src", "steps30_src", "xproc_assets"],
             type: XMLCalabashTask) {
  inputs.file "build/xproc30/xproc30.xml"
  inputs.file "tools/xsl/docbook.xsl"
  inputs.file "tools/xsl/dbspec.xsl"
  inputs.file "tools/xsl/xprocns.xsl"
  inputs.file "tools/xsl/ml-macro.xsl"
  inputs.file "tools/xsl/rngsyntax.xsl"
  inputs.file "tools/xpl/formatspec.xpl"
  outputs.file "build/xproc30/index.html"
  input("source", "build/xproc30/xproc30.xml")
  output("result", "build/xproc30/index.html")

  param("schemaext.schema", "../../../../../schema/dbspec.rng")
  param("xml.toc.filename", "xproc30.toc.xml")
  param("otherspec", "../steps30/steps30.xml")
  param("otherhref", "../steps30/")
  param("otherlabel", "XPS")
  param("spec", "xproc30")
  option("style", "../xsl/xproc-specs.xsl")
  pipeline "tools/xpl/formatspec.xpl"
}

task xproc_assets(dependsOn: [ "xproc_schemas", "xproc_css", "xproc_js", "xproc_images" ]) {
  // nop
}

task xproc_css(type: Copy) {
  from 'src/main/resources/css'
  into 'build/xproc30/css'
}
xproc_css.doFirst {
  mkdir "build/xproc30/css"
}

task xproc_js(type: Copy) {
  from 'src/main/resources/js'
  into 'build/xproc30/js'
}
xproc_js.doFirst {
  mkdir "build/xproc30/js"
}

task xproc_images(type: Copy) {
  from 'src/main/xml/xproc/graphics'
  into 'build/xproc30/graphics'
}
xproc_images.doFirst {
  mkdir 'build/xproc30/graphics'
}

task steps30(dependsOn: ["setupDocBook", "xproc30_src", "steps30_src", "step_assets"],
             type: XMLCalabashTask) {
  inputs.file "build/,steps30.xml"
  inputs.file "style/docbook.xsl"
  inputs.file "style/dbspec.xsl"
  inputs.file "style/xprocns.xsl"
  inputs.file "style/rngsyntax.xsl"
  outputs.file "build/steps30/index.html"
  input("source", "build/steps30/steps30.xml")
  output("result", "build/steps30/index.html")

  param("schemaext.schema", "../../../../../schema/dbspec.rng")
  param("xml.toc.filename", "steps.toc.xml")
  param("otherspec", "../xproc30/xproc30.xml")
  param("otherhref", "../xproc30/")
  param("otherlabel", "XP")
  param("spec", "steps30")
  option("style", "../xsl/xproc-specs.xsl")
  pipeline "tools/xpl/formatspec.xpl"
}

task step_assets(dependsOn: [ "step_schemas", "step_css", "step_js" ]) {
  // nop
}

task step_css(type: Copy) {
  from 'src/main/resources/css'
  into 'build/steps30/css'
}
step_css.doFirst {
  mkdir "build/steps30/css"
}

task step_js(type: Copy) {
  from 'src/main/resources/js'
  into 'build/steps30/js'
}
step_js.doFirst {
  mkdir "build/steps30/js"
}

task specification(dependsOn: [ "xproc30", "steps30" ]) {
  // nop
}
specification.doLast {
  println "Compiled XProc 3.0 specifications"
}

task clean(dependsOn: [ "clean_xproc30_examples", "clean_steps30_examples" ]) {
  delete "build"
}

task clean_xproc30_examples(type: Exec) {
  commandLine "make", "-C", "src/main/xml/xproc/examples", "clean"
}

task clean_steps30_examples(type: Exec) {
  commandLine "make", "-C", "src/main/xml/steps/examples", "clean"
}
