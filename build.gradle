buildscript {
  repositories {
    mavenCentral()
    maven { url "http://maven.restlet.org" }
  }

  dependencies {
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: '2.0.19'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-print', version: '1.1.4'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.1.2'
  }
}

plugins {
  id "de.undercouch.download" version "2.0.0"
}

repositories {
  mavenLocal()
  mavenCentral()
}

defaultTasks 'specification'

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask
import de.undercouch.gradle.tasks.download.Download

project.ext.docbookXslt = "docbook-xslt2-$docbookXsltVersion"

task downloadDocBook(type: Download) {
  src docbookXsltBaseUri + '/release/' + docbookXsltVersion + '/' + docbookXslt + '.zip'
  dest new File(buildDir, docbookXslt + '.zip')
}
downloadDocBook.onlyIf { !file("$buildDir/${docbookXslt}.zip").exists() }

task setupDocBook(dependsOn: downloadDocBook, type: Copy) {
  from zipTree(downloadDocBook.dest)
  into { "build" }
  doLast {
    copy {
      from "build/$docbookXslt"
      into 'build/docbook'
    }
  }
}
setupDocBook.onlyIf { !file("$buildDir/docbook").exists() }

task publish(dependsOn: ["publish_xproc30", "publish_steps30"]) {
  // nothing to see here
}

task publish_xproc30(dependsOn: ["xproc30",
                                 "publish_xproc30_xml",
                                 "publish_xproc30_graphics",
                                 "publish_xproc30_css"], type: Copy) {
  from('build') {
    include "xproc30.html"
    rename "xproc30.html", "index.html"
  }
  into "build/xproc30"
}

task publish_xproc30_xml(dependsOn: ['xproc30'], type: Copy) {
  from('build') {
    include ",xproc30.xml"
    rename ",xproc30.xml", "xproc30.xml"
  }
  into "build/xproc30"
}
task publish_xproc30_xml.doFirst {
  mkdir 'build/xproc30'
}

task publish_xproc30_css(dependsOn: ["copyCSS"], type: Copy) {
  from('build') {
    include "*.css"
  }
  into "build/xproc30"
}
task publish_xproc30_css.doFirst {
  mkdir 'build/xproc30'
}

task publish_xproc30_graphics(dependsOn: ["copyImages"], type: Copy) {
  from 'build/graphics'
  into "build/xproc30/graphics"
}
task publish_xproc30_graphics.doFirst {
  mkdir 'build/xproc30'
  mkdir 'build/xproc30/graphics'
}

task publish_steps30(dependsOn: ["steps30",
                                 "publish_steps30_xml",
                                 "publish_steps30_css"], type: Copy) {
  from('build') {
    include "steps30.html"
    rename "steps30.html", "index.html"
  }
  into "build/steps30"
}

task publish_steps30_xml(dependsOn: ['steps30'], type: Copy) {
  from('build') {
    include ",steps30.xml"
    rename ",steps30.xml", "steps30.xml"
  }
  into "build/steps30"
}
task publish_steps30_xml.doFirst {
  mkdir 'build/steps30'
}

task publish_steps30_css(dependsOn: ["copyCSS"], type: Copy) {
  from('build') {
    include "*.css"
  }
  into "build/steps30"
}
task publish_steps30_css.doFirst {
  mkdir 'build/steps30'
}

task copyCSS(type: Copy) {
  from 'css'
  into 'build'
}

task copyImages(type: Copy) {
  from 'langspec/xproc30/graphics'
  into 'build/graphics'
}
task copyImages.doFirst {
  mkdir 'build'
  mkdir 'build/graphics'
}

task copy_assets(dependsOn: ['copyCSS', 'copyImages']) {
  // nothing to see here
}

task legacy_make(type: Exec) {
  commandLine "make"
}

task xproc30(dependsOn: ["xproc30_xi2", "steps30_xi1", "copy_assets"], type: XMLCalabashTask) {
  inputs.file "build/,xproc30.xml"
  inputs.file "langspec/xproc30/error-list.xml"
  inputs.file "style/docbook.xsl"
  inputs.file "style/dbspec.xsl"
  inputs.file "style/xprocns.xsl"
  inputs.file "style/rngsyntax.xsl"
  outputs.file "build/xproc30.html"
  input("source", "build/,xproc30.xml")
  output("result", "build/xproc30.html")

  param("schemaext.schema", "../../../../../schema/dbspec.rng")
  param("xml.toc.filename", "xproc30.toc.xml")
  param("otherspec", "../build/,steps30.xml")
  param("otherhref", "../steps30/")
  param("otherlabel", "XPS")
  param("spec", "xproc30")
  option("style", "xproc-specs.xsl")
  pipeline "style/formatspec.xpl"
}

task xproc30_xi1(dependsOn: ["setupDocBook"], type: XMLCalabashTask) {
  inputs.file "langspec/xproc30/xproc.xml"
  inputs.file "langspec/xproc30/conformance.xml"
  inputs.file "langspec/xproc30/error-codes.xml"
  inputs.file "langspec/xproc30/language-summary.xml"
  inputs.file "langspec/xproc30/mediatype.xml"
  inputs.file "langspec/xproc30/namespace-fixup.xml"
  inputs.file "langspec/xproc30/parallel.xml"
  inputs.file "langspec/xproc30/references.xml"
  outputs.file "build/,,xproc30.xml"
  input("source", "langspec/xproc30/xproc.xml")
  output("result", "build/,,xproc30.xml")
  option("schema", "schema/dbspec.rng")
  option("schematron", "schema/docbook.sch")
  pipeline "style/validate.xpl"
}

task xproc30_xi2(dependsOn: ["glossary"], type: XMLCalabashTask) {
  inputs.file "langspec/xproc30/xproc.xml"
  inputs.file "langspec/xproc30/conformance.xml"
  inputs.file "langspec/xproc30/error-codes.xml"
  inputs.file "langspec/xproc30/glossary.xml"
  inputs.file "langspec/xproc30/language-summary.xml"
  inputs.file "langspec/xproc30/mediatype.xml"
  inputs.file "langspec/xproc30/namespace-fixup.xml"
  inputs.file "langspec/xproc30/parallel.xml"
  inputs.file "langspec/xproc30/references.xml"
  outputs.file "build/,xproc30.xml"
  input("source", "langspec/xproc30/xproc.xml")
  output("result", "build/,xproc30.xml")
  param("schema", "../../schema/dbspec.rng")
  param("schematron", "../../schema/docbook.sch")
  pipeline "style/validate.xpl"
}

task glossary(dependsOn: ["xproc30_xi1", "legacy_make"], type: XMLCalabashTask) {
  inputs.file "build/,,xproc30.xml"
  inputs.file "style/makeglossary.xpl"
  inputs.file "style/makeglossary.xsl"
  outputs.file "langspec/xproc30/glossary.xml"
  input("source", "build/,,xproc30.xml")
  output("result", "langspec/xproc30/glossary.xml")
  pipeline "style/makeglossary.xpl"
}

task steps30(dependsOn: ["steps30_xi1", "xproc30_xi2", "copy_assets"], type: XMLCalabashTask) {
  inputs.file "build/,steps30.xml"
  inputs.file "style/docbook.xsl"
  inputs.file "style/dbspec.xsl"
  inputs.file "style/xprocns.xsl"
  inputs.file "style/rngsyntax.xsl"
  outputs.file "build/steps30.html"
  input("source", "build/,steps30.xml")
  output("result", "build/steps30.html")

  param("schemaext.schema", "../../../../../schema/dbspec.rng")
  param("xml.toc.filename", "steps.toc.xml")
  param("otherspec", "../build/,xproc30.xml")
  param("otherhref", "../xproc30/")
  param("otherlabel", "XP")
  param("spec", "steps30")
  option("style", "xproc-specs.xsl")
  pipeline "style/formatspec.xpl"
}

task steps30_xi1(dependsOn: ["setupDocBook", "legacy_make"], type: XMLCalabashTask) {
  inputs.file "langspec/xproc30-steps/steps.xml"
  inputs.file "langspec/xproc30-steps/errors.xml"
  inputs.file "langspec/xproc30-steps/error-codes.xml"
  inputs.file "langspec/xproc30-steps/serialization-options-for-escape-markup.xml"
  inputs.file "langspec/xproc30-steps/serialization-options.xml"
  outputs.file "build/,steps30.xml"
  input("source", "langspec/xproc30-steps/steps.xml")
  output("result", "build/,steps30.xml")
  option("schema", "schema/dbspec.rng")
  option("schematron", "schema/docbook.sch")
  pipeline "style/validate.xpl"
}

/* The default task. It just depends on all the necessary pages */
task specification(dependsOn: ["xproc30", "steps30"]) {
  /* Nothing to see here */
}

task clean
task clean.doFirst {
  delete "$buildDir"
}
