<section xmlns="http://docbook.org/ns/docbook" xmlns:cs="http://www.w3.org/XML/XProc/2006/04/components#" xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xmlns:p="http://www.w3.org/ns/xproc" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="c.template" role="ext-optional">
<title>p:template</title>

<para>The <code>p:template</code> replaces each XPath expression, delimited with
curly braces, in the <port>template</port> document with the result of evaluating that
expression.</para>

<p:declare-step type="p:template">
  <p:input port="template"/>
  <p:input port="source" sequence="true" primary="true"/>
  <p:output port="result"/>
  <p:option name="parameters" as="map(xs:QName,item())"/>
</p:declare-step>

<para>While evaluating each expression, the names of any parameters passed to the
step are available as variable values in the XPath dynamic context.</para>

<para>The step searches for XPath expressions in attribute values,
text content (adjacent text nodes, if they occur in the data model,
must be coalesced; this step always processes maximal length text
nodes), processing instruction data, and comments. XPath expressions
are identified by curly braces, similar to attribute value templates
in XSLT or enclosed expressions in XQuery.</para>

<para>In order to allow curly braces to appear literally in content, they can be escaped
by doubling them. In other words, where “<code>{</code>” would start an XPath expression,
“<code>{{</code>” is simply a <emphasis>single</emphasis>, literal opening curly brace.
The same applies for closing curly braces.</para>

<para>Inside an XPath expression, strings quoted by single (<code>'</code>) or
double (<code>"</code>) quotes are treated literally. Outside of quoted text, it
is an error for an opening curly brace to occur. A closing curly brace ends the
XPath expression (whether or not it is followed immediately by another closing
curly brace).</para>

<para>These parsing rules can be described by the following algorithm, though implementations
are by no means required to implement the parsing in exactly this way, provided that they
achieve the same results.</para>

<itemizedlist>
<listitem><para>The parser begins in <emphasis>regular-mode</emphasis> at the start of
each unit of content where expansion may occur. In <emphasis>regular-mode</emphasis>:
</para>
<orderedlist>
<listitem><para>“<code>{{</code>” is replaced by a single “<code>{</code>”.</para></listitem>
<listitem><para>“<code>}}</code>” is replaced by a single “<code>}</code>”.
</para>
<para>Note:
<error code="C0067">It is a <glossterm>dynamic error</glossterm> to
encounter a single closing curly brace “<code>}</code>” that is not immediately
followed by another closing curly brace.</error>
</para></listitem>
<listitem><para>A single opening curly brace “<code>{</code>” (not
immediately followed by another opening curly brace) is discarded and
the parser moves into <emphasis>xpath-mode</emphasis>. The inital expression is empty.
</para></listitem>
<listitem><para>All other characters are copied without change.</para></listitem>
</orderedlist>
</listitem>
<listitem>
<para>In <emphasis>xpath-mode</emphasis>:</para>
<orderedlist>
<listitem><para><error code="C0067">It is a <glossterm>dynamic error</glossterm> to
encounter an opening curly brace “<code>{</code>”.</error></para></listitem>
<listitem><para>A closing curly brace “<code>}</code>” is discarded and ends the
expression. The expression is evaluated and the result of that
evaluation is copied to the output. The parser returns to
<emphasis>regular-mode</emphasis>.</para>
<para>Note: Braces cannot be escaped by doubling them
in <emphasis>xpath-mode</emphasis>.</para></listitem>
<listitem><para>A single quote (<code>'</code>) is added to the current expression and
the parser moves to <emphasis>single-quote-mode</emphasis>.</para></listitem>
<listitem><para>A double quote (<code>"</code>) is added to the current expression and
the parser moves to <emphasis>double-quote-mode</emphasis>.</para></listitem>
<listitem><para>All other characters are appended to the current expression.</para></listitem>
</orderedlist>
</listitem>
<listitem>
<para>In <emphasis>single-quote-mode</emphasis>:</para>
<orderedlist>
<listitem><para>A single quote (<code>'</code>) is added to the current expression and
the parser moves to <emphasis>xpath-mode</emphasis>.</para></listitem>
<listitem><para>All other characters are appended to the current expression.</para></listitem>
</orderedlist>
</listitem>
<listitem>
<para>In <emphasis>double-quote-mode</emphasis>:</para>
<orderedlist>
<listitem><para>A double quote (<code>"</code>) is added to the current expression and
the parser moves to <emphasis>xpath-mode</emphasis>.</para></listitem>
<listitem><para>All other characters are appended to the current expression.</para></listitem>
</orderedlist>
</listitem>
</itemizedlist>

<para><error code="C0067">It is a <glossterm>dynamic error</glossterm> if the parser reaches
the end of the unit of content and it is not in <emphasis>regular-mode</emphasis>.</error>
</para>

<para>The context node used for each expression is the document passed on the
<port>source</port> port.
<error code="C0068">It is a <glossterm>dynamic error</glossterm>
if more than one document appears on the <port>source</port> port.</error>
In an XPath 1.0 implementation, if
<tag>p:empty</tag> is given or implied on the <port>source</port> port, an
empty document node is used as
the context node. In an XPath 2.0 implementation, the context item is
undefined.
<error code="C0026">It is a <glossterm>dynamic error</glossterm> if
any XPath expression makes reference to the context node, size, or
position when the context item is undefined.</error></para>

<para>In an attribute value, processing instruction, or comment, the
string value of the XPath expression is used. In text content, an
expression that selects nodes will cause those nodes to be copied into
the template document.</para>

<note xml:id="note-xpath-version">
<para>Depending on which version of XPath an implementation supports,
and possibly on the <tag class="attribute">xpath-version</tag> setting on
the <tag>p:template</tag>, some implementations may report errors, or
different results, than other implementations in those cases where the
interpretation of an XPath expression differs between the versions of
XPath.</para>
</note>

<section xml:id="ex-template" role="tocsuppress">
<title>Example</title>

<para>It's quite common to construct documents using values computed
by the pipeline. This is particularly (but not exclusively) the case
when the pipeline uses the <tag>p:http-request</tag> step. The input
to <tag>p:http-request</tag> is a <tag>c:request</tag> document;
attributes on the <tag>c:request</tag> element control most of the
request parameters; the body of the document forms the body of
request.</para>

<para>A typical example looks like this:</para>

<programlisting>&lt;c:request method="POST" href="http://example.com/post"
           username="user" password="password"&gt;
&lt;c:body&gt;
  &lt;computed-content/&gt;
&lt;/c:body&gt;
&lt;/c:request&gt;</programlisting>

<para>If we assume that the <tag class="attribute">href</tag> value and the computed
content come from an input document, and the username and password are options, then a
typical pipeline to compute the request becomes quite complex.</para>

<programlisting><xi:include href="../examples/doctemp-1.xml" parse="text"/></programlisting>

<para>There's nothing wrong with this pipeline, but it requires
several steps to accomplish with the pipeline author probably
considers a single operation. What's more, the result of these steps
is not immediately obvious on casual inspection.</para>

<para>In order to make this simple construction case both literally
and conceptually simpler, this note introduces two new XProc steps in
the XProc namespace. Support for these steps is optional, but we
strongly encourage implementors to provide them.</para>

<para>The new steps are <tag>p:in-scope-names</tag> and
<tag>p:template</tag>. Taken together, they greatly simplify
the pipeline:</para>

<programlisting><xi:include href="../examples/doctemp-2.xml" parse="text"/></programlisting>

<para>The <tag>p:in-scope-names</tag> step provides all of the in-scope options and variables
in a <tag>c:param-set</tag> (this operation is exactly analagous to what the
<tag>p:parameters</tag> step does, except that it operates on the options and variables instead
of on parameters).</para>

<para>The <tag>p:template</tag> step searches for XPath
expressions, delimited by curly braces, in a template document and replaces each with the
result of evaluating the expression. All of the parameters passed to the
<tag>p:template</tag> step are available as in-scope variable names when evaluating
each XPath expression.</para>

<para>Where the expressions occur in attribute values, their string value is used. Where
they appear in text content, their node values are used.</para>

</section>
</section>
