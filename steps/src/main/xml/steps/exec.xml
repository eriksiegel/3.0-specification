<section xmlns="http://docbook.org/ns/docbook" xmlns:cs="http://www.w3.org/XML/XProc/2006/04/components#" xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xmlns:p="http://www.w3.org/ns/xproc" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="c.exec">
<title>p:exec</title>

<para>The <tag>p:exec</tag> step runs an external command passing the
input that arrives on its <port>source</port> port as standard input,
reading <port>result</port> from standard output, and <port>errors</port>
from standard error.</para>

<p:declare-step type="p:exec">
  <p:input port="source" primary="true" sequence="true" content-types="*/*"/>
  <p:output port="result" primary="true" content-types="*/*"/>
  <p:output port="errors"/>
  <p:output port="exit-status"/>
  <p:option name="command" required="true" as="xs:string"/>
  <p:option name="args" select="''" as="xs:string"/>
  <p:option name="cwd" as="xs:string"/>
  <p:option name="source-is-xml" select="true()" as="xs:boolean"/>
  <p:option name="result-is-xml" select="true()" as="xs:boolean"/>
  <p:option name="wrap-result-lines" select="false()" as="xs:boolean"/>
  <p:option name="errors-is-xml" select="false()" as="xs:boolean"/>
  <p:option name="wrap-error-lines" select="false()" as="xs:boolean"/>
  <p:option name="path-separator" as="xs:string"/>
  <p:option name="failure-threshold" as="xs:integer"/>
  <p:option name="arg-separator" select="' '" as="xs:string"/>
  <p:option name="serialization" as="map(xs:string,xs:anyAtomicValue)"/>
</p:declare-step>

<para>The values of the <option>command</option>, <option>args</option>,
<option>cwd</option>, <option>path-separator</option>, and
<option>arg-separator</option> options <rfc2119>must</rfc2119> be strings.</para>

<para>The values of the <option>source-is-xml</option>,
<option>result-is-xml</option>, <option>errors-is-xml</option>,
and <option>fix-slashes</option> options <rfc2119>must</rfc2119> be
boolean.</para>

<para>The <tag>p:exec</tag> step executes the command passed on
<option>command</option> with the arguments passed on
<option>args</option>. The processor does not interpolate the values
of the <option>command</option> or <option>args</option> (for example,
expanding references to environment variables).
<error code="C0033">It is a <glossterm>dynamic
error</glossterm> if the command cannot be run.</error>
</para>

<para>If <option>cwd</option> is specified, then the current working
directory is changed to the value of that option before execution
begins. <error code="C0034">It is a <glossterm>dynamic
error</glossterm> if the current working directory cannot be changed
to the value of the <option>cwd</option> option.</error>
<impl>If <option>cwd</option> is not
specified, the current working directory is
<glossterm>implementation-defined</glossterm>.</impl></para>

<para>If the <option>path-separator</option> option is specified,
every occurrence of the character identified as the
<option>path-separator</option> character that occurs in the
<option>command</option>, <option>args</option>, or
<option>cwd</option> will be replaced by the platform-specific path
separator character. <error code="C0063">It is a <glossterm>dynamic
error</glossterm> if the <option>path-separator</option> option is
specified and is not exactly one character long.</error>
</para>

<para>The value of the <option>args</option> option is a string. In
order to support passing more than one argument to a command, the
<option>args</option> string is broken into a sequence of values.
The <option>arg-separator</option> option specifies the character
that is used to separate values; by default it is a single space
<error code="C0066">It is a <glossterm>dynamic error</glossterm> if
the <option>arg-separator</option> option is specified and is not
exactly one character long.</error>
</para>

<para>The following examples of <tag>p:exec</tag> are equivalent. The
first uses the default <option>arg-separator</option>:</para>

<programlisting language="xml"><xi:include href="../../../../build/examples/exec-as1.txt" parse="text"/></programlisting>

<para>The second specifies an alternate separator:</para>

<programlisting language="xml"><xi:include href="../../../../build/examples/exec-as2.txt" parse="text"/></programlisting>

<para>If one of the arguments contains a space (e.g., a filename that
contains a space), then you must specify an alternate separator.</para>

<para>The <port>source</port> port is declared to accept a sequence so
that it can be empty. If no document appears on the
<port>source</port> port, then the command receives nothing on
standard input. If a document does arrive on the <port>source</port>
port, it will be passed to the command as its standard input. <error
code="D0006">It is a <glossterm>dynamic error</glossterm> if more than
one document appears on the <port>source</port> port of the
<tag>p:exec</tag> step.</error>
If <option>source-is-xml</option> is true, the value of the
<option>serialization</option> option is used to convert the input
into serialized XML which is passed to the command, otherwise the
XPath string-value of the document is passed. Serialization is
described in
<link linkend="serialization">Serialization</link>.</para>

<para>The standard output of the command is read and returned on
<port>result</port>; the standard error output is read and returned on
<port>errors</port>. In order to assure that the result will be an
XML document, each of the results will be wrapped in a <tag>c:result</tag>
element.</para>

<para>If <option>result-is-xml</option> is true, the standard output of
the program is assumed to be XML and will be parsed as a single document.
If it is false, the output is assumed <emphasis>not</emphasis> to be XML
and will be returned as escaped text.</para>

<para xml:id="cv.line">If <option>wrap-result-lines</option> is
true, a <tag>c:line</tag> element will be wrapped around each line of output.</para>

<e:rng-pattern name="VocabLine"/>

<para><error code="C0035">It is a <glossterm>dynamic
error</glossterm> to specify both <option>result-is-xml</option> and
<option>wrap-result-lines</option>.</error></para>

<para>The same rules apply to the
standard error output of the program, with the <option>errors-is-xml</option>
and <option>wrap-error-lines</option> options, respectively.</para>

<para>If either of the results are XML, they <rfc2119>must</rfc2119> be
parsed with namespaces enabled and validation turned off, just like
<tag>p:document</tag>.</para>

<para>The <port>exit-status</port> port always returns a single
<tag>c:result</tag> element which contains the system exit status that
the process returned. <impl>The specific exit status values returned by
a process invoked with <tag>p:exec</tag> are
<glossterm>implementation-dependent</glossterm>.</impl></para>

<para>If a <option>failure-threshold</option> value is supplied, and the
exit status is greater than that threshold, then the <tag>p:exec</tag>
step <rfc2119>must</rfc2119> fail.
<error code="C0064">It is a <glossterm>dynamic
error</glossterm> if the exit code from the command is greater than
the specified <option>failure-threshold</option> value.</error>
This failure, like any step failure,
can be captured with a <tag>p:try</tag>.</para>

<section>
<title>Document properties</title>
<para feature="exec-preserves-none">No document properties are preserved.</para>
</section>
</section>
