<section xmlns="http://docbook.org/ns/docbook" xmlns:cs="http://www.w3.org/XML/XProc/2006/04/components#" xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xmlns:p="http://www.w3.org/ns/xproc" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="c.load">
<title>p:load</title>

<para>The <code>p:load</code> step has no inputs but produces as its
result a document (or documents) specified by an IRI. If it is relative, it is 
made absolute against the base URI of the element on which it is specified 
(<tag>p:with-option</tag> or <tag>p:load</tag> in the case of a syntactic 
shortcut value).</para>

<p:declare-step type="p:load">
  <p:output port="result" sequence="true" content-types="*/*"/>
  <p:option name="href" required="true" as="xs:anyURI"/>
  <p:option name="parameters" as="map(xs:QName,item())"/>
  <p:option name="document-properties" as="map(xs:QName, item())"/>
</p:declare-step>

<para>The document or documents identified by the
<option>href</option> URI are loaded and
returned. If the URI protocol supports redirection, then redirects
<rfc2119>must</rfc2119> be followed. Implementations
<rfc2119>should</rfc2119> support “globbing”. See
<xref linkend="uri-globbing"/>.</para>

<para><error code="D0011">It is a <glossterm>dynamic error</glossterm> 
if the resource referenced by a <code>p:load</code> element does not exist, 
cannot be accessed, or has an XML content type and is not a well-formed 
XML document.</error></para>  

<para>The behavior of this step depends on the content type of the
document or documents loaded. The content type of each document is
determined as follows:</para>

<orderedlist>
<listitem>
<para>If a <property>content-type</property> property is specified
in <option>document-properties</option>, then each document
<rfc2119>must</rfc2119> be interpreted according to that content type.
</para>
</listitem>
<listitem>
<para>If the documents are retrieved with a URI protocol that specifies
a content type (for example, <literal>http:</literal>), then the document
<rfc2119>must</rfc2119> be interpreted according to that content type.
</para>
</listitem>
<listitem>
<para><impl>In the absence of an explicit type, the content
type is <glossterm>implementation-defined</glossterm></impl>.</para>
</listitem>
</orderedlist>

<para>The <option>parameters</option> map contains additional, optional
parameters that may influence the way that content is loaded. The interpretation
of this map varies according to the content type. Parameter names that are in
no namespace are treated as strings using only the local-name where appropriate.</para>

<para>Broadly speaking, there are four categories of data that might
be loaded:
<link linkend="c.load.xml">XML</link>,
<link linkend="c.load.text">text</link>,
<link linkend="c.load.json">JSON</link>, and “other”
<link linkend="c.load.binary">binary</link> data.</para>

<section xml:id="c.load.xml">
<title>Loading XML data</title>

<para>For an XML media type, the content is loaded and parsed as XML.</para>

<para>If the <option>dtd-validate</option> parameter is <literal>true</literal>
and the document has a <literal>doctype</literal> declaration,
then DTD validation must be performed when parsing the document.
<error code="D0023">It is a <glossterm>dynamic error</glossterm> if a DTD
validation is performed and the document is not valid.</error>
<error code="D0043">It is a <glossterm>dynamic error</glossterm>
if the <option>dtd-validate</option> parameter is <literal>true</literal> and
the processor does not support DTD validation.</error></para>

<para><impl>Additional XML parameters are <glossterm>implementation-defined</glossterm>.
</impl></para>
</section>

<section xml:id="c.load.text">
<title>Loading text data</title>
<para>For a text media type, the content is loaded as a text document.</para>

<para><impl>Text parameters are <glossterm>implementation-defined</glossterm>.
</impl></para>

</section>

<section xml:id="c.load.json">
<title>Loading JSON data</title>

<para>For a JSON media type, the content is loaded and parsed as JSON.</para>

<para>The parameters specified for the <code>fn:parse-json</code> function
in <biblioref linkend="xpath-functions"/>
<rfc2119>must</rfc2119> be supported.
<impl>Additional JSON parameters are <glossterm>implementation-defined</glossterm>.
</impl></para>
<para><error code="D0057">It is a <glossterm>dynamic error</glossterm> if the loaded content 
does not conform to the JSON grammar, unless the option <option>liberal</option> is 
<literal>true</literal> and the processor chooses to accept the deviation.</error></para>
<para><error code="D0058">It is a <glossterm>dynamic error</glossterm> if the option 
<option>duplicates<option> is <literal>reject</literal> is present and the value of 
  loaded content contains a JSON object with duplicate keys.</error></para>
</section>
<section xml:id="c.load.binary">
<title>Loading binary data</title>

<para>An XProc processor may load other, arbitrary data types. <impl>How a
processor interprets other media types is <glossterm>implementation-defined</glossterm>.
</impl>
<impl>Parameters for other media types
are <glossterm>implementation-defined</glossterm>.
</impl></para>
</section>

<simplesect>
<title>Document properties</title>
<para feature="load-preserves-none">No document properties are preserved.
The properties specified in <option>document-properties</option> are applied.
</para>
</simplesect>
</section>
